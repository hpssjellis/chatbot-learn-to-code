<!DOCTYPE html>
<html>
  <head>
    <title>Log-Log Sinusoidal Growth Plot</title>
    <script src="https://cdn.jsdelivr.net/npm/plotly.js-dist@3.0.1/plotly.min.js"></script>
    <style>
      body {
        font-family: sans-serif;
        margin: 20px;
        background-color: #f4f4f4;
        color: #333;
      }
      h3 {
        color: #0056b3;
        text-align: center;
        margin-bottom: 20px;
      }
      input[type="button"] {
        background-color: #007bff;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-bottom: 15px;
      }
      input[type="button"]:hover {
        background-color: #0056b3;
      }
      input[type="text"] {
        padding: 8px;
        margin: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 80px; /* Adjust width for better layout */
      }
      .controls {
        margin-bottom: 20px;
        text-align: center;
      }
      .controls label {
        display: inline-block;
        width: 100px; /* Align labels */
        text-align: right;
        margin-right: 5px;
      }
      #myPlot {
        border: 1px solid #ddd;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        margin: 0 auto; /* Center the plot */
        max-width: 90%; /* Ensure responsiveness */
      }
    </style>
  </head>
  <body>
    <h3 style="font-family:sans-serif;">Log-Log Growing Sinusoids</h3>

    <div class="controls">
      <input type="button" value="Overlay BTC Data" onclick="myAddBitcoinToPlot()"><br>

      <label>Frequency:</label>
      <input type="text" value="0.9" size="6" onchange="myBaseFreqs[0] = parseFloat(this.value); myGenerateLogLogData();">
      <input type="text" value="0.6" size="6" onchange="myBaseFreqs[1] = parseFloat(this.value); myGenerateLogLogData();">
      <input type="text" value="0.9" size="6" onchange="myBaseFreqs[2] = parseFloat(this.value); myGenerateLogLogData();"><br>

      <label>Amplitude:</label>
      <input type="text" value="10" size="6" onchange="myBaseAmps[0] = parseFloat(this.value); myGenerateLogLogData();">
      <input type="text" value="100" size="6" onchange="myBaseAmps[1] = parseFloat(this.value); myGenerateLogLogData();">
      <input type="text" value="200" size="6" onchange="myBaseAmps[2] = parseFloat(this.value); myGenerateLogLogData();"><br>

      <label>Phase:</label>
      <input type="text" value="2.0" size="6" onchange="myPhases[0] = parseFloat(this.value); myGenerateLogLogData();">
      <input type="text" value="0.7" size="6" onchange="myPhases[1] = parseFloat(this.value); myGenerateLogLogData();">
      <input type="text" value="0.6" size="6" onchange="myPhases[2] = parseFloat(this.value); myGenerateLogLogData();"><br>

      <label>Baseline Scale:</label>
      <input type="text" value="8000" size="6" onchange="myOffset = parseInt(this.value); myGenerateLogLogData();">
      <label>Constant Shift:</label>
      <input type="text" value="-8000" size="6" onchange="myStart = parseInt(this.value); myGenerateLogLogData();">
      <label>Baseline Growth Factor:</label>
      <input type="text" value="0.333" size="6" onchange="baselineGrowthFactor = parseFloat(this.value); myGenerateLogLogData();">
    </div>

    <div id="myPlot" style="width:90%;height:600px;"></div>

    <script>
      // GLOBAL VARIABLES
      let myBaseFreqs = [0.9, 0.6, 0.9];
      let myBaseAmps = [10, 100, 200];
      let myPhases    = [2.0, 0, 0];

      // These variables now control the baseline's initial scale and constant shift
      let myOffset = 8000; // This acts as the initial scaling factor for the exponential baseline
      let myStart = -8000; // This acts as a constant additive shift to the entire curve
      let baselineGrowthFactor = 1/3; // Controls the steepness of the exponential baseline

      /**
       * Asynchronously fetches Bitcoin (BTCUSDT) weekly closing prices from Binance API
       * and overlays them onto the existing Plotly graph.
       */
      async function myAddBitcoinToPlot() {
        const url = 'https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1w&limit=1000';
        try {
          const response = await fetch(url);
          const data = await response.json();

          // Extract year (with month as fraction) for x-axis
          const btcDates = data.map(candle => {
            const d = new Date(candle[0]);
            return d.getFullYear() + (d.getMonth() / 12);
          });

          // Extract closing prices and convert to numbers
          const btcPrices = data.map(candle => parseFloat(candle[4]));

          // Define the trace for Bitcoin prices
          const trace1 = {
            x: btcDates,
            y: btcPrices,
            mode: 'lines',
            line: { color: 'orange', width: 3 },
            name: 'BTC Price (USD)'
          };

          // Add new traces to existing Plotly graph
          Plotly.addTraces('myPlot', [trace1]);

          console.log('✅ Bitcoin data added to plot.');
        } catch (err) {
          console.error('❌ Failed to load BTC data:', err);
        }
      }

      /**
       * Generates and plots sinusoidal growth data on a log-log scale.
       * The function calculates three individual waves and a combined sum,
       * applying exponential growth to both amplitude and frequency,
       * and an exponential baseline with a constant offset.
       */
      function myGenerateLogLogData() {
        let myYears = [];          // Array to hold the years for the x-axis
        let myCombined = [];       // Array to hold the combined sum of all waves
        let myWaves = [[], [], []]; // Arrays for the individual waves

        // Loop through years from 2017 to 2035 for data generation
        for (let year = 2017; year <= 2035; year++) {
          // Calculate log of (year - 1969) for the x-axis transformation.
          // Subtracting 1969 makes the starting point (1970) correspond to log10(1) = 0.
          let logYear = Math.log10(year - 1969);
          myYears.push(year); // Add the year to the x-axis array
          let mySum = 0;      // To accumulate the sum of the waves for the combined wave

          // --- MATHEMATICALLY SENSIBLE BASELINE CALCULATION ---
          // The baseline represents the underlying exponential growth trend.
          // myOffset acts as the initial scaling factor for this exponential growth.
          // baselineGrowthFactor determines how steeply this baseline grows.
          let baseline = myOffset * Math.exp(logYear * baselineGrowthFactor);

          // Loop through each of the three waves
          for (let i = 0; i < 3; i++) {
            // Frequency increases exponentially with logYear
            // The coefficient (e.g., 1.0, 1.5, 2.0) determines how fast the frequency compresses.
            let myFreq = myBaseFreqs[i] * Math.exp(logYear * (i === 0 ? 1.0 : (i === 1 ? 1.5 : 2.0)));

            // Amplitude increases exponentially with logYear
            // The coefficient (e.g., 4.0, 1.9, 1.9) determines how fast the amplitude grows.
            let myAmp  = myBaseAmps[i] * Math.exp(logYear * (i === 0 ? 4.0 : 1.9));

            // Generate sine wave value
            let myY = myAmp * Math.sin(2 * Math.PI * myFreq * logYear + myPhases[i]);

            // Add the sine wave value, the exponential baseline, and the constant shift.
            let adjustedY = myY + baseline + myStart;
            myWaves[i].push(adjustedY);
            mySum += adjustedY;
          }

          // Store the combined wave (sum of all waves with baseline and constant shift)
          myCombined.push(mySum);
        }

        // Plot individual sine wave components
        let myTraces = myWaves.map((wave, i) => ({
          x: myYears,
          y: wave,
          mode: 'lines',
          line: { color: 'green', width: 1 },
          name: 'Wave ' + (i + 1)
        }));

        // Add the combined wave (sum of all individual waves)
        myTraces.push({
          x: myYears,
          y: myCombined,
          mode: 'lines',
          line: { color: 'blue', width: 3 },
          name: 'Combined'
        });

        // Layout for the graph (adjust for axis range, labels, etc.)
        let myLayout = {
          title: 'Exponential Sine Growth on Log-Log Plot',
          xaxis: {
            title: 'Year',
            type: 'log', // Set the x-axis to logarithmic scale
            tickvals: [1990, 2000, 2020, 2040, 2070] // Custom x-axis ticks
          },
          yaxis: {
            title: 'Simulated Dollars',
            type: 'log', // Set the y-axis to logarithmic scale
            range: [2, 7] // Adjust range to zoom in (log10 scale)
          },
          margin: { t: 40 }
        };

        // Create the plot using Plotly with the traces and layout
        Plotly.newPlot('myPlot', myTraces, myLayout);
      }

      // Call the function to generate and display the graph on page load
      myGenerateLogLogData();
    </script>
  </body>
</html>
